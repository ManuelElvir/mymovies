{"version":3,"file":"static/js/45.19e69331.chunk.js","mappings":"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","sources":["helpers/api/ApiClient.ts","helpers/api/services/Movies.ts","pages/Home/Home.Component.tsx"],"sourcesContent":["import axios from 'axios';\n\n\n// default\naxios.defaults.baseURL = process.env?.API_URL;\n\n// content type\naxios.defaults.headers.post['Content-Type'] = 'application/json; charset=utf-8';\n\naxios.defaults.headers.post['Authorization'] = 'bearer ' + process.env?.THE_MOVIE_DATABASE_SECRET;\n\n\nclass APIClient {\n\n    /**\n     * Set the default contentType\n     */\n    setContentType = (contentType: string) => {\n        axios.defaults.headers.post['Content-Type'] = contentType;\n        axios.defaults.headers.post['accept'] = contentType;\n    }\n\n    /**\n     * Fetches data from given url\n     */\n    get = (url: string, params: any) => {\n       \n        return axios.get(url, params)\n    }\n\n    /**\n     * post given data to url\n     */\n    create = (url: string, data: any) => {\n        \n        return axios.post(url, data);\n    }\n\n    /**\n     * Updates data\n     */\n    update = (url: string, data: any) => {\n       \n        return axios.patch(url, data);\n    }\n\n    /**\n     * Delete\n     */\n    delete = (url: string) => {\n       \n        return axios.put(url);\n    }\n}\n\nexport default APIClient;","import APIClient from \"../ApiClient\"\n\nconst apiClient = new APIClient()\n\nexport interface signInProps {\n    username : string,\n    password: string\n}\n\nexport interface signUpProps {\n    username : string,\n    email : string,\n    password: string,\n    user_key?: string | null\n}\n\nexport const list = (page:number) => {\n    return apiClient.get(`/movie/changes`, {page})\n    .then((response:any) => response.json())\n}\n\nexport const search = (search : string, page : number) => {\n    return apiClient.get(`/movie/changes`, {page})\n    .then((response:any) => response.json())\n}\n\nexport const getHomeData = (page : number, language: string) => {\n    return apiClient.get(`/movie/popular?`, {page, language})\n    .then((response:any) => response.json())\n}\n\nexport const getLiveData = (page : number, language: string) => {\n    return apiClient.get(`/movie/now_playing?`, {page, language})\n    .then((response:any) => response.json())\n}\nexport const getUpcomingData = (page : number, language: string) => {\n    return apiClient.get(`/movie/upcoming?`, {page, language})\n    .then((response:any) => response.json())\n}\nexport const getTrendsData = (page : number, language: string) => {\n    return apiClient.get(`/movie/top_rated?`, {page, language})\n    .then((response:any) => response.json())\n}","import React from 'react'\nimport { getHomeData } from '../../helpers/api/services/Movies';\nimport { LoaderFunctionArgs } from 'react-router-dom';\n\ntype HomeProps = {\n}\n\nconst Home : React.FC<HomeProps> = () => {\n\n    return(\n        <div>\n\n        </div>\n    )\n}\n\nHome.displayName = 'Home'\n\nexport const fetchHomeData = async ({ request }:LoaderFunctionArgs) => {\n    const page = parseInt((await request.formData()).get('page')?.toString() || '1')\n    const lang = (await request.formData()).get('lang')?.toString() || 'en'\n    let data = await getHomeData(page, lang==='fr'?'fr-FR':'en-US');\n    return data;\n}\n\nexport default Home\n"],"names":["axios","_process$env","process","API_URL","_process$env2","THE_MOVIE_DATABASE_SECRET","apiClient","_createClass","APIClient","_classCallCheck","setContentType","contentType","get","url","params","create","data","update","delete","getHomeData","page","language","then","response","json","Home","_jsx","displayName","fetchHomeData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","_yield$request$formDa","_yield$request$formDa2","request","lang","wrap","_context","prev","next","t0","parseInt","formData","t3","sent","t2","t4","toString","t1","t5","t8","t7","t9","t6","abrupt","stop","_x","apply","arguments"],"sourceRoot":""}